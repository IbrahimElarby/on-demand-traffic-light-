
on deman traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000582  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000005f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b4  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e0  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b83  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062e  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00003d1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  74:	0c 94 bf 02 	jmp	0x57e	; 0x57e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <button_config>:
	{
		led_toggle(ped_port,ped_yellow);
		delay_s(1);
	}
	led_off(ped_port,ped_yellow);
}
  7c:	64 e4       	ldi	r22, 0x44	; 68
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 10 01 	call	0x220	; 0x220 <button_init>
  84:	08 95       	ret

00000086 <normal_mode_config>:
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	81 e4       	ldi	r24, 0x41	; 65
  8a:	0e 94 17 01 	call	0x22e	; 0x22e <led_init>
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	0e 94 17 01 	call	0x22e	; 0x22e <led_init>
  96:	62 e0       	ldi	r22, 0x02	; 2
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 17 01 	call	0x22e	; 0x22e <led_init>
  9e:	08 95       	ret

000000a0 <ped_mode_config>:
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	82 e4       	ldi	r24, 0x42	; 66
  a4:	0e 94 17 01 	call	0x22e	; 0x22e <led_init>
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	82 e4       	ldi	r24, 0x42	; 66
  ac:	0e 94 17 01 	call	0x22e	; 0x22e <led_init>
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	0e 94 17 01 	call	0x22e	; 0x22e <led_init>
  b8:	08 95       	ret

000000ba <normal_red>:
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e4       	ldi	r24, 0x42	; 66
  c6:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <car_state>
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 a2 02 	call	0x544	; 0x544 <delay_s>
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
  e8:	08 95       	ret

000000ea <normal_yellow>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <car_state>
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	0d c0       	rjmp	.+26     	; 0x124 <normal_yellow+0x3a>
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	0e 94 23 01 	call	0x246	; 0x246 <led_toggle>
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	82 e4       	ldi	r24, 0x42	; 66
 116:	0e 94 23 01 	call	0x246	; 0x246 <led_toggle>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 a2 02 	call	0x544	; 0x544 <delay_s>
 122:	21 96       	adiw	r28, 0x01	; 1
 124:	c5 30       	cpi	r28, 0x05	; 5
 126:	d1 05       	cpc	r29, r1
 128:	84 f3       	brlt	.-32     	; 0x10a <normal_yellow+0x20>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <normal_green>:
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
 150:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <car_state>
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 a2 02 	call	0x544	; 0x544 <delay_s>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
 16c:	08 95       	ret

0000016e <pedgreen>:
void pedgreen()
{
	led_on(ped_port,ped_green);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	82 e4       	ldi	r24, 0x42	; 66
 172:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
	delay_s(5);
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 a2 02 	call	0x544	; 0x544 <delay_s>
	led_off(ped_port,ped_green);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	82 e4       	ldi	r24, 0x42	; 66
 182:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
 186:	08 95       	ret

00000188 <check_state>:
}
car_led check_state(car_led car_state)
{
	return car_state;
}
 188:	08 95       	ret

0000018a <ped_mode>:
void ped_mode()
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
	if(check_state(car_state) == CAR_RED)
 18e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <car_state>
 192:	0e 94 c4 00 	call	0x188	; 0x188 <check_state>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	59 f4       	brne	.+22     	; 0x1b0 <ped_mode+0x26>
	{
		led_on(car_port,car_red);
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
		pedgreen();
 1a2:	0e 94 b7 00 	call	0x16e	; 0x16e <pedgreen>
		led_off(car_port,car_red);
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
 1ae:	35 c0       	rjmp	.+106    	; 0x21a <ped_mode+0x90>
	}
	else if (check_state(car_state) == CAR_YELLOW  ||  check_state(car_state) == CAR_GREEN )
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <ped_mode+0x2e>
 1b4:	81 11       	cpse	r24, r1
 1b6:	31 c0       	rjmp	.+98     	; 0x21a <ped_mode+0x90>
	{
		led_off(car_port,car_green);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
		led_on(ped_port,ped_yellow);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
		led_on(car_port,car_yellow);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
		for(int i = 0 ; i < 5 ; i++)
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <ped_mode+0x66>
		{
			led_toggle(ped_port,ped_yellow);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 23 01 	call	0x246	; 0x246 <led_toggle>
			led_toggle(car_port,car_yellow);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 23 01 	call	0x246	; 0x246 <led_toggle>
			delay_s(1);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 a2 02 	call	0x544	; 0x544 <delay_s>
	else if (check_state(car_state) == CAR_YELLOW  ||  check_state(car_state) == CAR_GREEN )
	{
		led_off(car_port,car_green);
		led_on(ped_port,ped_yellow);
		led_on(car_port,car_yellow);
		for(int i = 0 ; i < 5 ; i++)
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	c5 30       	cpi	r28, 0x05	; 5
 1f2:	d1 05       	cpc	r29, r1
 1f4:	84 f3       	brlt	.-32     	; 0x1d6 <ped_mode+0x4c>
		{
			led_toggle(ped_port,ped_yellow);
			led_toggle(car_port,car_yellow);
			delay_s(1);
		}
		led_off(ped_port,ped_yellow);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	82 e4       	ldi	r24, 0x42	; 66
 1fa:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
		led_off(car_port,car_yellow);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	81 e4       	ldi	r24, 0x41	; 65
 202:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
		led_on(car_port,car_red);
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	0e 94 1b 01 	call	0x236	; 0x236 <led_on>
		pedgreen();
 20e:	0e 94 b7 00 	call	0x16e	; 0x16e <pedgreen>
		led_off(car_port,car_red);
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 1f 01 	call	0x23e	; 0x23e <led_off>
	}
	
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <button_init>:
 *  Author: GAMING STORE
 */ 
#include "Button.h"

void button_init(uint8_t buttonpin , uint8_t buttonport)
{
 220:	98 2f       	mov	r25, r24
 222:	86 2f       	mov	r24, r22
	dio_init(buttonport,buttonpin,IN);
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	69 2f       	mov	r22, r25
 228:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <dio_init>
 22c:	08 95       	ret

0000022e <led_init>:
 *  Author: GAMING STORE
 */ 
#include "led.h"
void led_init(uint8_t ledport , uint8_t ledpin)
{
	dio_init(ledport,ledpin,OUT);
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <dio_init>
 234:	08 95       	ret

00000236 <led_on>:
}
void led_on(uint8_t ledport , uint8_t ledpin)
{
	dio_write(ledport,ledpin,HIGH);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	0e 94 d6 01 	call	0x3ac	; 0x3ac <dio_write>
 23c:	08 95       	ret

0000023e <led_off>:
}
void led_off(uint8_t ledport , uint8_t ledpin)
{
	dio_write(ledport,ledpin,LOW);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	0e 94 d6 01 	call	0x3ac	; 0x3ac <dio_write>
 244:	08 95       	ret

00000246 <led_toggle>:
}
void led_toggle(uint8_t ledport , uint8_t ledpin)
{
	dio_toggle(ledport,ledpin);
 246:	0e 94 50 02 	call	0x4a0	; 0x4a0 <dio_toggle>
 24a:	08 95       	ret

0000024c <main>:
car_led car_state;
uint8_t flag = 0;
int main(void)
{
    /* Replace with your application code */
	button_config();
 24c:	0e 94 3e 00 	call	0x7c	; 0x7c <button_config>
	normal_mode_config();
 250:	0e 94 43 00 	call	0x86	; 0x86 <normal_mode_config>
	ped_mode_config();
 254:	0e 94 50 00 	call	0xa0	; 0xa0 <ped_mode_config>
	interrupt_config();
 258:	0e 94 b5 02 	call	0x56a	; 0x56a <interrupt_config>
    while (1) 
    {   
			if(flag == 1)
 25c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	21 f4       	brne	.+8      	; 0x26c <main+0x20>
			{
				ped_mode();
 264:	0e 94 c5 00 	call	0x18a	; 0x18a <ped_mode>
				flag = 0;
 268:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			}
		normal_red();
 26c:	0e 94 5d 00 	call	0xba	; 0xba <normal_red>
		if(flag == 1)
 270:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	21 f4       	brne	.+8      	; 0x280 <main+0x34>
		{
			ped_mode();
 278:	0e 94 c5 00 	call	0x18a	; 0x18a <ped_mode>
			flag = 0;
 27c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		}
		normal_yellow();
 280:	0e 94 75 00 	call	0xea	; 0xea <normal_yellow>
		if(flag == 1)
 284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	21 f4       	brne	.+8      	; 0x294 <main+0x48>
		{
			ped_mode();
 28c:	0e 94 c5 00 	call	0x18a	; 0x18a <ped_mode>
			flag = 0;
 290:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		}
		normal_green();
 294:	0e 94 a0 00 	call	0x140	; 0x140 <normal_green>
	
    }
 298:	e1 cf       	rjmp	.-62     	; 0x25c <main+0x10>

0000029a <__vector_1>:
	
}

ISR(EXT_INT_0)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
	//ped_mode();
	flag = 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
}
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <dio_init>:
 *  Author: GAMING STORE
 */ 
#include "dio.h"
void dio_init(uint8_t portnumber , uint8_t pinnumber , uint8_t direaction)
{
	switch(portnumber)
 2b8:	82 34       	cpi	r24, 0x42	; 66
 2ba:	31 f1       	breq	.+76     	; 0x308 <dio_init+0x50>
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <dio_init+0xc>
 2be:	81 34       	cpi	r24, 0x41	; 65
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <dio_init+0x18>
 2c2:	08 95       	ret
 2c4:	83 34       	cpi	r24, 0x43	; 67
 2c6:	e1 f1       	breq	.+120    	; 0x340 <dio_init+0x88>
 2c8:	84 34       	cpi	r24, 0x44	; 68
 2ca:	09 f4       	brne	.+2      	; 0x2ce <dio_init+0x16>
 2cc:	54 c0       	rjmp	.+168    	; 0x376 <dio_init+0xbe>
 2ce:	08 95       	ret
	{
		case PORT_A :
		if(direaction == IN)
 2d0:	41 11       	cpse	r20, r1
 2d2:	0c c0       	rjmp	.+24     	; 0x2ec <dio_init+0x34>
		{
			DDRA &= ~(1<<pinnumber);
 2d4:	2a b3       	in	r18, 0x1a	; 26
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <dio_init+0x28>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <dio_init+0x24>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	8a bb       	out	0x1a, r24	; 26
 2ea:	08 95       	ret
		}
		else if (direaction == OUT)
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <dio_init+0x3a>
 2f0:	5c c0       	rjmp	.+184    	; 0x3aa <dio_init+0xf2>
		{
			DDRA |= (1<<pinnumber);
 2f2:	2a b3       	in	r18, 0x1a	; 26
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <dio_init+0x46>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <dio_init+0x42>
 302:	82 2b       	or	r24, r18
 304:	8a bb       	out	0x1a, r24	; 26
 306:	08 95       	ret
		}
		break;
		case  PORT_B :
		if(direaction == IN)
 308:	41 11       	cpse	r20, r1
 30a:	0c c0       	rjmp	.+24     	; 0x324 <dio_init+0x6c>
		{
			DDRB &= ~(1<<pinnumber);
 30c:	27 b3       	in	r18, 0x17	; 23
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <dio_init+0x60>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <dio_init+0x5c>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	87 bb       	out	0x17, r24	; 23
 322:	08 95       	ret
		}
		else if (direaction == OUT)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	09 f0       	breq	.+2      	; 0x32a <dio_init+0x72>
 328:	40 c0       	rjmp	.+128    	; 0x3aa <dio_init+0xf2>
		{
			DDRB |= (1<<pinnumber);
 32a:	27 b3       	in	r18, 0x17	; 23
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <dio_init+0x7e>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <dio_init+0x7a>
 33a:	82 2b       	or	r24, r18
 33c:	87 bb       	out	0x17, r24	; 23
 33e:	08 95       	ret
		}
		break;
		case  PORT_C:
		if(direaction == IN)
 340:	41 11       	cpse	r20, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <dio_init+0xa4>
		{
			DDRC &= ~(1<<pinnumber);
 344:	24 b3       	in	r18, 0x14	; 20
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <dio_init+0x98>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <dio_init+0x94>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	84 bb       	out	0x14, r24	; 20
 35a:	08 95       	ret
		}
		else if (direaction == OUT)
 35c:	41 30       	cpi	r20, 0x01	; 1
 35e:	29 f5       	brne	.+74     	; 0x3aa <dio_init+0xf2>
		{
			DDRC |= (1<<pinnumber);
 360:	24 b3       	in	r18, 0x14	; 20
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <dio_init+0xb4>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <dio_init+0xb0>
 370:	82 2b       	or	r24, r18
 372:	84 bb       	out	0x14, r24	; 20
 374:	08 95       	ret
		}
		break;
		case  PORT_D:
		if(direaction == IN)
 376:	41 11       	cpse	r20, r1
 378:	0c c0       	rjmp	.+24     	; 0x392 <dio_init+0xda>
		{
			DDRD &= ~(1<<pinnumber);
 37a:	21 b3       	in	r18, 0x11	; 17
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <dio_init+0xce>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <dio_init+0xca>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	81 bb       	out	0x11, r24	; 17
 390:	08 95       	ret
		}
		else if (direaction == OUT)
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	51 f4       	brne	.+20     	; 0x3aa <dio_init+0xf2>
		{
			DDRD |= (1<<pinnumber);
 396:	21 b3       	in	r18, 0x11	; 17
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <dio_init+0xea>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <dio_init+0xe6>
 3a6:	82 2b       	or	r24, r18
 3a8:	81 bb       	out	0x11, r24	; 17
 3aa:	08 95       	ret

000003ac <dio_write>:
		break;
	}
}
void dio_write(uint8_t portnumber , uint8_t pinnumber , uint8_t value)
{
	switch(portnumber)
 3ac:	82 34       	cpi	r24, 0x42	; 66
 3ae:	31 f1       	breq	.+76     	; 0x3fc <dio_write+0x50>
 3b0:	18 f4       	brcc	.+6      	; 0x3b8 <dio_write+0xc>
 3b2:	81 34       	cpi	r24, 0x41	; 65
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <dio_write+0x18>
 3b6:	08 95       	ret
 3b8:	83 34       	cpi	r24, 0x43	; 67
 3ba:	e1 f1       	breq	.+120    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3bc:	84 34       	cpi	r24, 0x44	; 68
 3be:	09 f4       	brne	.+2      	; 0x3c2 <dio_write+0x16>
 3c0:	54 c0       	rjmp	.+168    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 3c2:	08 95       	ret
	{
		case  PORT_A:
		if(value == LOW)
 3c4:	41 11       	cpse	r20, r1
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <dio_write+0x34>
		{
			PORTA &= ~(1<<pinnumber);
 3c8:	2b b3       	in	r18, 0x1b	; 27
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <dio_write+0x28>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <dio_write+0x24>
 3d8:	80 95       	com	r24
 3da:	82 23       	and	r24, r18
 3dc:	8b bb       	out	0x1b, r24	; 27
 3de:	08 95       	ret
		}
		else if (value == HIGH)
 3e0:	41 30       	cpi	r20, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <dio_write+0x3a>
 3e4:	5c c0       	rjmp	.+184    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		{
			PORTA |= (1<<pinnumber);
 3e6:	2b b3       	in	r18, 0x1b	; 27
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <dio_write+0x46>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <dio_write+0x42>
 3f6:	82 2b       	or	r24, r18
 3f8:	8b bb       	out	0x1b, r24	; 27
 3fa:	08 95       	ret
		}
		break;
		case  PORT_B:
		if(value == LOW)
 3fc:	41 11       	cpse	r20, r1
 3fe:	0c c0       	rjmp	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			PORTB &= ~(1<<pinnumber);
 400:	28 b3       	in	r18, 0x18	; 24
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 95       	com	r24
 412:	82 23       	and	r24, r18
 414:	88 bb       	out	0x18, r24	; 24
 416:	08 95       	ret
		}
		else if (value == HIGH)
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	40 c0       	rjmp	.+128    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		{
			PORTB |= (1<<pinnumber);
 41e:	28 b3       	in	r18, 0x18	; 24
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	88 bb       	out	0x18, r24	; 24
 432:	08 95       	ret
		}
		break;
		case PORT_C :
		if(value == LOW)
 434:	41 11       	cpse	r20, r1
 436:	0c c0       	rjmp	.+24     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			PORTC &= ~(1<<pinnumber);
 438:	25 b3       	in	r18, 0x15	; 21
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	80 95       	com	r24
 44a:	82 23       	and	r24, r18
 44c:	85 bb       	out	0x15, r24	; 21
 44e:	08 95       	ret
		}
		else if (value == HIGH)
 450:	41 30       	cpi	r20, 0x01	; 1
 452:	29 f5       	brne	.+74     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		{
			PORTC |= (1<<pinnumber);
 454:	25 b3       	in	r18, 0x15	; 21
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	82 2b       	or	r24, r18
 466:	85 bb       	out	0x15, r24	; 21
 468:	08 95       	ret
		}
		break;
		case  PORT_D:
		if(value == LOW)
 46a:	41 11       	cpse	r20, r1
 46c:	0c c0       	rjmp	.+24     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			PORTD &= ~(1<<pinnumber);
 46e:	22 b3       	in	r18, 0x12	; 18
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	82 bb       	out	0x12, r24	; 18
 484:	08 95       	ret
		}
		else if (value == HIGH)
 486:	41 30       	cpi	r20, 0x01	; 1
 488:	51 f4       	brne	.+20     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		{
			PORTD |= (1<<pinnumber);
 48a:	22 b3       	in	r18, 0x12	; 18
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	82 2b       	or	r24, r18
 49c:	82 bb       	out	0x12, r24	; 18
 49e:	08 95       	ret

000004a0 <dio_toggle>:
		break;
	}
}
void dio_toggle(uint8_t portnumber , uint8_t pinnumber )
{
	switch(portnumber)
 4a0:	82 34       	cpi	r24, 0x42	; 66
 4a2:	a1 f0       	breq	.+40     	; 0x4cc <dio_toggle+0x2c>
 4a4:	18 f4       	brcc	.+6      	; 0x4ac <dio_toggle+0xc>
 4a6:	81 34       	cpi	r24, 0x41	; 65
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <dio_toggle+0x16>
 4aa:	08 95       	ret
 4ac:	83 34       	cpi	r24, 0x43	; 67
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <dio_toggle+0x42>
 4b0:	84 34       	cpi	r24, 0x44	; 68
 4b2:	11 f1       	breq	.+68     	; 0x4f8 <dio_toggle+0x58>
 4b4:	08 95       	ret
	{
		case  PORT_A:
		PORTA ^= (1<<pinnumber);
 4b6:	2b b3       	in	r18, 0x1b	; 27
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <dio_toggle+0x22>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <dio_toggle+0x1e>
 4c6:	82 27       	eor	r24, r18
 4c8:	8b bb       	out	0x1b, r24	; 27
		break;
 4ca:	08 95       	ret
		case  PORT_B:
		
		PORTB ^= (1<<pinnumber);
 4cc:	28 b3       	in	r18, 0x18	; 24
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <dio_toggle+0x38>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <dio_toggle+0x34>
 4dc:	82 27       	eor	r24, r18
 4de:	88 bb       	out	0x18, r24	; 24
		
		break;
 4e0:	08 95       	ret
		case PORT_C :
		PORTC ^= (1<<pinnumber);
 4e2:	25 b3       	in	r18, 0x15	; 21
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <dio_toggle+0x4e>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <dio_toggle+0x4a>
 4f2:	82 27       	eor	r24, r18
 4f4:	85 bb       	out	0x15, r24	; 21
		
		break;
 4f6:	08 95       	ret
		case  PORT_D:
		PORTD ^= (1<<pinnumber);
 4f8:	22 b3       	in	r18, 0x12	; 18
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <dio_toggle+0x64>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <dio_toggle+0x60>
 508:	82 27       	eor	r24, r18
 50a:	82 bb       	out	0x12, r24	; 18
 50c:	08 95       	ret

0000050e <timer1_config>:

#include "timer.h"

void timer1_config()
{
	TCCR1A = 0x00;
 50e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
 510:	1e bc       	out	0x2e, r1	; 46
 512:	08 95       	ret

00000514 <timer1_init>:
}
void timer1_init()
{
	// intial value C2F7 with 64 prescaler
	TCNT1L = Intial_value_L; 
 514:	87 ef       	ldi	r24, 0xF7	; 247
 516:	8c bd       	out	0x2c, r24	; 44
	TCNT1H = Intial_value_H;
 518:	82 ec       	ldi	r24, 0xC2	; 194
 51a:	8d bd       	out	0x2d, r24	; 45
 51c:	08 95       	ret

0000051e <timer1_start>:
}

void timer1_start()
{
	TCCR1B |=  0x03; // prescaler 64
 51e:	8e b5       	in	r24, 0x2e	; 46
 520:	83 60       	ori	r24, 0x03	; 3
 522:	8e bd       	out	0x2e, r24	; 46
 524:	08 95       	ret

00000526 <delay>:
}
void delay()
{
	timer1_config();
 526:	0e 94 87 02 	call	0x50e	; 0x50e <timer1_config>
	timer1_init();
 52a:	0e 94 8a 02 	call	0x514	; 0x514 <timer1_init>
	timer1_start();
 52e:	0e 94 8f 02 	call	0x51e	; 0x51e <timer1_start>
	while((TIFR & (1<<2)) == 0);
 532:	08 b6       	in	r0, 0x38	; 56
 534:	02 fe       	sbrs	r0, 2
 536:	fd cf       	rjmp	.-6      	; 0x532 <delay+0xc>
	TIFR |= 1<<2;
 538:	88 b7       	in	r24, 0x38	; 56
 53a:	84 60       	ori	r24, 0x04	; 4
 53c:	88 bf       	out	0x38, r24	; 56
	timer1_config();
 53e:	0e 94 87 02 	call	0x50e	; 0x50e <timer1_config>
 542:	08 95       	ret

00000544 <delay_s>:
}
void delay_s(uint32_t dly)
{
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	8c 01       	movw	r16, r24
	uint32_t i = 0;
 54e:	c0 e0       	ldi	r28, 0x00	; 0
 550:	d0 e0       	ldi	r29, 0x00	; 0
	while (i != dly)
 552:	03 c0       	rjmp	.+6      	; 0x55a <delay_s+0x16>
	{
		delay();
 554:	0e 94 93 02 	call	0x526	; 0x526 <delay>
		i++;
 558:	21 96       	adiw	r28, 0x01	; 1
	timer1_config();
}
void delay_s(uint32_t dly)
{
	uint32_t i = 0;
	while (i != dly)
 55a:	c0 17       	cp	r28, r16
 55c:	d1 07       	cpc	r29, r17
 55e:	d1 f7       	brne	.-12     	; 0x554 <delay_s+0x10>
	{
		delay();
		i++;
	}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <interrupt_config>:
 */ 
#include "interupt.h"

void interrupt_config()
{
	SREG |= (1<<7);
 56a:	8f b7       	in	r24, 0x3f	; 63
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= 0x03;
 570:	85 b7       	in	r24, 0x35	; 53
 572:	83 60       	ori	r24, 0x03	; 3
 574:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<6);
 576:	8b b7       	in	r24, 0x3b	; 59
 578:	80 64       	ori	r24, 0x40	; 64
 57a:	8b bf       	out	0x3b, r24	; 59
 57c:	08 95       	ret

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
